JavaScript 옵셔널 체이닝(optional chaining) 
객체의 중첩된 속성에 안전하게 접근할 수 있게 해주는 문법입니다. 
이와 유사하게 자주 쓰이는 문법으로는 null 병합 연산자(??)가 있습니다.

1. 옵셔널 체이닝 (?.) 설명
기본 문법 예시
object?.property
object?.[expression]
object?.method()

동작 방식
객체가 null 또는 undefined인 경우, 에러 없이 undefined 반환
그렇지 않으면 정상적으로 접근
일반 접근 (에러 발생 가능)

예시
let user = null;
console.log(user.name); // ❌ 에러: Cannot read properties of null

옵셔널 체이닝으로 안전하게 접근
let user = null;
console.log(user?.name); // ✅ undefined 반환, 에러 없음

2. 함수나 배열 접근에도 사용 가능
예시
let user = {
  getName: function() {
    return 'Alice';
  }
};
console.log(user?.getName?.()); // ✅ 'Alice'
let empty = null;
console.log(empty?.getName?.()); // ✅ undefined

3. 배열 요소 접근
let arr = [1, 2, 3];
console.log(arr?.[0]); // ✅ 1

let emptyArr = null;
console.log(emptyArr?.[0]); // ✅ undefined

4. 조건문 없이 간단하게 사용 가능
if (user && user.profile && user.profile.name) {
  console.log(user.profile.name);
}

//위와 동일한 의미
console.log(user?.profile?.name);

옵셔널 체이닝과 비슷한 문법
[1] Null 병합 연산자 (??)
왼쪽 값이 null 또는 undefined일 때만 오른쪽 사용

예시
let name = user?.name ?? "이름 없음"; // user.name이 없으면 "이름 없음"


연산자 ?. > 안전하게 접근 (null 에러 방지)
연산자 ?? > 기본값 설정 (null/undefined일 때)


예시
?.	객체/속성/메서드 접근 시 안전하게 처리	user?.name, obj?.method?.()
??	null 또는 undefined일 때 기본값 지정	user.name ?? "이름 없음"
