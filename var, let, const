자바스크립트에서는 var, let, const 3가지 방법으로 변수를 선언할 수 있는데, 각각 동작 방식, 범위(scope), 재할당 가능 여부가 다릅니다. 

1. var
특징
함수 범위(function scope)
중복 선언 가능
재할당 가능
호이스팅됨 (선언이 코드 상단으로 끌어올려짐, 단 초기화는 아님)

예시
var x = 10;
var x = 20;  // 중복 선언 가능
console.log(x); // 20

function test() {
    if (true) {
        var a = 5;
    }
    console.log(a); // 5 (함수 범위이기 때문에 접근 가능)
}


2. let
특징
블록 범위(block scope)
중복 선언 불가 (같은 범위 내에서)
재할당 가능
호이스팅됨(하지만 초기화 전에는 접근 불가)

예시
let y = 10;
// let y = 20; // ❌ 에러: 같은 범위에서는 중복 선언 불가
y = 30; // ✅ 재할당은 가능

if (true) {
    let b = 10;
}
console.log(b); // ❌ 에러: 블록 범위 벗어남


3. const
특징
블록 범위(block scope)
중복 선언 불가
재할당 불가 (한 번만 값 할당 가능)
객체/배열은 내부 값 변경 가능

예시
const z = 5;
// z = 10; // ❌ 에러: 재할당 불가

const obj = { name: 'Tom' };
obj.name = 'Jerry'; // ✅ 객체 내부는 수정 가능


결론
기본적으로는 const 사용 → 값 변경이 필요할 때만 let
var는 레거시 코드나 특별한 이유가 없으면 사용 자제하는 것이 좋습니다.

* 레거시 (Legacy) : 오래된 기술, 시스템, 코드를 의미합니다. 최신 기술 기준에서는 비효율적이거나 권장되지 않지만, 여전히 사용 중인 것들을 말해요.
* 호이스팅 (Hoisting) : 변수 선언이나 함수 선언이 코드 상단으로 끌어올려지는 자바스크립트의 동작 방식입니다.
