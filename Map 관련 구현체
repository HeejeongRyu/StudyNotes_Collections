정리
 Map: 키-값 쌍으로 데이터를 저장하는 기본 인터페이스.
 HashMap: 비동기 Map 기본 구현체로 빠른 성능을 제공하며, 일반적인 Map 작업에 적합.
 LinkedHashMap: 입력 순서나 접근 순서를 유지하며, 캐시나 순서가 중요한 작업에 적합.
 List: 순서가 있는 데이터 구조로, 인덱스를 통해 데이터에 접근.
 ListMap: 키-값 형태로 저장하며, 순서를 유지하는 Map (주로 사용자 정의 구현체에서 사용됨).
 TreeMap: 키를 정렬된 순서로 유지하며, 범위 검색(subMap, headMap)이 필요한 경우에 적합.
 Hashtable: 동기화된 Map 구현체로, 멀티스레드 환경에서 동작하지만 성능은 낮음.
 ConcurrentHashMap: 멀티스레드 환경에서 효율적인 동기화 Map 구현체로, 성능과 안정성을 동시에 제공.
 ImmutableMap: 변경할 수 없는 Map으로, 불변 데이터나 멀티스레드 환경에서 안정적으로 사용 가능.

1. Map
설명
 Map은 키와 값의 쌍으로 데이터를 저장하는 인터페이스입니다. 하나의 키는 고유하며, 각 키는 하나의 값에 매핑됩니다.

주요 메서드
 put(K key, V value): 키와 값을 추가하거나 갱신합니다.
 get(Object key): 주어진 키에 매핑된 값을 반환합니다.
 containsKey(Object key): 주어진 키가 존재하는지 확인합니다.
 keySet(), values(), entrySet(): 각각 키, 값, 키-값 쌍을 반환합니다.

주요 구현체
 HashMap: 키와 값의 저장 순서를 유지하지 않음.
 LinkedHashMap: 입력 순서 또는 접근 순서를 유지.
 TreeMap: 키를 정렬된 순서로 유지.


2. HashMap
설명
 HashMap은 Map 인터페이스의 대표적인 구현체로, 해시 테이블을 사용해 데이터를 저장하며, 빠른 검색, 삽입, 삭제를 제공합니다.
 
특징
 키-값 쌍으로 데이터를 저장하며, 순서를 보장하지 않음.
 null 키와 null 값을 허용.
 동기화되지 않아 여러 스레드 환경에서 사용 시 주의 필요.
 
시간 복잡도
 검색, 삽입, 삭제: 평균적으로 𝑂(1).
 
예제
 Map<String, Integer> map = new HashMap<>();
 map.put("Alice", 30);
 map.put("Bob", 25);
 System.out.println(map.get("Alice")); // 30

 
3. LinkedHashMap
설명
 LinkedHashMap은 HashMap을 확장한 클래스이며, 데이터 저장 순서를 유지합니다.
 
특징
 입력된 순서(삽입 순서)를 유지하거나, 설정에 따라 접근 순서(가장 최근에 접근한 순서)를 유지.
 null 키와 null 값을 허용.
 해시 테이블과 이중 연결 리스트(Doubly Linked List)를 사용하여 순서 유지.
 
주요 용도
 캐시 구현(LRU 캐시 등).
 순서를 보장해야 하는 상황에서 사용.
 
예제
 Map<String, Integer> linkedMap = new LinkedHashMap<>();
 linkedMap.put("Alice", 30);
 linkedMap.put("Bob", 25);
 linkedMap.put("Charlie", 35);
 System.out.println(linkedMap); // {Alice=30, Bob=25, Charlie=35}
 

4. List
설명
 List는 순서가 있는 컬렉션을 나타내며, 중복된 요소를 허용하는 인터페이스입니다.
 
주요 구현체
 ArrayList: 배열 기반, 빠른 검색.
 LinkedList: 연결 리스트 기반, 빠른 삽입/삭제.
 
특징
 순서를 유지.
 요소를 인덱스로 접근 가능.
 
예제
 List<String> list = new ArrayList<>();
 list.add("Alice");
 list.add("Bob");
 System.out.println(list.get(0)); // Alice
 
 
5. ListMap
설명
 표준 Java 컬렉션 프레임워크에 포함되지 않은 개념이지만, 몇 가지 가능성을 고려할 수 있습니다.

사용자 정의 데이터 구조
 특정 키에 여러 값(List)을 매핑하고 싶을 때 사용.

구현 예제
 Map<String, List<String>> listMap = new HashMap<>();
 listMap.put("Fruits", Arrays.asList("Apple", "Banana"));
 listMap.put("Vegetables", Arrays.asList("Carrot", "Spinach"));
 System.out.println(listMap.get("Fruits")); // [Apple, Banana]
 
 
6. TreeMap
설명
 TreeMap은 키를 자연 순서 또는 사용자 정의 Comparator에 의해 정렬된 순서로 유지합니다.

시간 복잡도
 삽입, 삭제, 검색: 𝑂(log 𝑛) 트리의 높이에 비례합니다.

특징
 키가 반드시 Comparable 인터페이스를 구현하거나, TreeMap 생성 시 Comparator를 제공해야 합니다.
 정렬 순서를 유지하므로 범위 검색(예: subMap, headMap, tailMap)에 적합합니다.
 
null 처리
 키로는 null을 허용하지 않습니다.
 값에는 null을 허용합니다.
 
 
7. Hashtable
 HashMap과 유사한 Map 구현체
 Hashtable은 키와 값을 해시 기반으로 저장하지만, 동기화(synchronized) 처리되어 멀티스레드 환경에서 안전합니다.
 
null 허용 여부
 null 키와 null 값을 허용하지 않습니다. (NullPointerException 발생)
 
성능
 동기화된 구조로 인해 단일 스레드 환경에서는 HashMap보다 느림.
 
사용 사례
 동기화가 필요한 단순한 해시 기반 Map을 사용할 때 적합.
 하지만, 멀티스레드 환경에서는 보통 ConcurrentHashMap으로 대체됩니다.
 
 
8. ConcurrentHashMap
 멀티스레드 환경용 Map
 ConcurrentHashMap은 고성능 멀티스레드 환경에서 사용되며, 동기화된 Map을 대체합니다.
 
내부 동작
 데이터는 내부적으로 여러 분할(Segment) 로 나뉘어 동시 접근을 허용합니다.
 Java 8 이후부터는 ConcurrentHashMap이 분할 락 대신 CAS(Compare-And-Swap) 및 배열 기반 구조를 사용해 더욱 효율적.
 
특징
 동시 읽기는 잠금 없이 수행됩니다.
 쓰기는 해당 데이터 조각에만 잠금을 걸어 병렬 성능을 높입니다.
 
null 허용 여부
 null 키와 null 값을 허용하지 않습니다.
 
시간 복잡도
 검색, 삽입, 삭제: 평균 𝑂(1) 하지만 해시 충돌이 많으면 최악의 경우 𝑂(𝑛)


9. ImmutableMap
 불변 Map 구현체
 ImmutableMap은 생성 후 변경할 수 없는 Map을 제공합니다.
 모든 데이터를 설정한 뒤에는 수정, 삽입, 삭제가 불가능합니다.
Java 9 이후 간편 생성
 Map.of() 또는 Map.ofEntries() 메서드를 사용하여 간단히 생성 가능
 
예시
 Map<String, String> map = Map.of("key1", "value1", "key2", "value2");
 
특징
 안정성: 데이터가 불변이라 멀티스레드 환경에서 안전하게 사용할 수 있습니다.
 효율성: 불변 데이터 구조로 읽기 성능이 최적화되어 있습니다.

사용 사례
 데이터 변경이 필요 없는 환경에서 유용.
 
null 허용 여부
 null 키와 null 값을 허용하지 않습니다. (IllegalArgumentException 발생)
